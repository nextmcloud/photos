{"version":3,"file":"photos-src_mixins_FetchCollectionContentMixin_js-src_mixins_FetchFilesMixin_js-src_mixins_FilesByMon-5efd32.js?v=28527f459d85dea77d53","mappings":"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","sources":["webpack:///photos/src/mixins/FetchCollectionContentMixin.js","webpack:///photos/src/services/PhotoSearch.js","webpack:///photos/src/mixins/FetchFilesMixin.js","webpack:///photos/src/mixins/FilesByMonthMixin.js"],"sourcesContent":["/**\n * @copyright Copyright (c) 2022 Louis Chemineau <louis@chmn.me>\n *\n * @author Louis Chemineau <louis@chmn.me>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport { mapActions } from 'vuex'\n\nimport { showError } from '@nextcloud/dialogs'\n\nimport AbortControllerMixin from './AbortControllerMixin.js'\nimport { fetchCollection, fetchCollectionFiles } from '../services/collectionFetcher.js'\nimport logger from '../services/logger.js'\nimport SemaphoreWithPriority from '../utils/semaphoreWithPriority.js'\n\nexport default {\n\tname: 'FetchCollectionContentMixin',\n\n\tdata() {\n\t\treturn {\n\t\t\tfetchSemaphore: new SemaphoreWithPriority(1),\n\t\t\tloadingCollection: false,\n\t\t\tloadingCollectionFiles: false,\n\t\t\terrorFetchingCollection: null,\n\t\t\terrorFetchingCollectionFiles: null,\n\t\t}\n\t},\n\n\tmixins: [\n\t\tAbortControllerMixin,\n\t],\n\n\tmethods: {\n\t\t...mapActions([\n\t\t\t'appendFiles',\n\t\t\t'addCollections',\n\t\t\t'setCollectionFiles',\n\t\t]),\n\t\t/**\n\t\t * @param {string} collectionFileName\n\t\t * @param {string[]} [extraProps] - Extra properties to add to the DAV request.\n\t\t * @param {import('webdav').WebDAVClient} [client] - The DAV client to use.\n\t\t * @return {Promise<import('../services/collectionFetcher.js').Collection|null>}\n\t\t */\n\t\tasync fetchCollection(collectionFileName, extraProps, client) {\n\t\t\tif (this.loadingCollection) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis.loadingCollection = true\n\t\t\t\tthis.errorFetchingCollection = null\n\n\t\t\t\tconst collection = await fetchCollection(collectionFileName, { signal: this.abortController.signal }, extraProps, client)\n\t\t\t\tthis.addCollections({ collections: [collection] })\n\t\t\t\treturn collection\n\t\t\t} catch (error) {\n\t\t\t\tif (error.response?.status === 404) {\n\t\t\t\t\tthis.errorFetchingCollection = 404\n\t\t\t\t\treturn null\n\t\t\t\t}\n\n\t\t\t\tthis.errorFetchingCollection = error\n\t\t\t\tlogger.error('[PublicCollectionContent] Error fetching collection', { error })\n\t\t\t\tshowError(this.t('photos', 'Failed to fetch collection.'))\n\t\t\t} finally {\n\t\t\t\tthis.loadingCollection = false\n\t\t\t}\n\n\t\t\treturn null\n\t\t},\n\n\t\t/**\n\t\t * @param {string} collectionFileName\n\t\t * @param {string[]} [extraProps] - Extra properties to add to the DAV request.\n\t\t * @param {import('webdav').WebDAVClient} [client] - The DAV client to use.\n\t\t * @param {((value: import('../services/collectionFetcher.js').CollectionFile, index: number, array: import('../services/collectionFetcher.js').CollectionFile[]) => any)[]} [mappers] - Callback that can transform files before they are appended.\n\t\t * @return {Promise<import('../services/collectionFetcher.js').CollectionFile[]>}\n\t\t */\n\t\tasync fetchCollectionFiles(collectionFileName, extraProps, client, mappers = []) {\n\t\t\tif (this.loadingCollectionFiles) {\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\tconst fetchSemaphoreSymbol = await this.fetchSemaphore.acquire()\n\n\t\t\ttry {\n\t\t\t\tthis.errorFetchingCollectionFiles = null\n\t\t\t\tthis.loadingCollectionFiles = true\n\n\t\t\t\tlet fetchedFiles = await fetchCollectionFiles(collectionFileName, { signal: this.abortController.signal }, extraProps, client)\n\t\t\t\tconst fileIds = fetchedFiles.map(file => file.fileid.toString())\n\n\t\t\t\tmappers.forEach(mapper => (fetchedFiles = fetchedFiles.map(mapper)))\n\n\t\t\t\tthis.appendFiles(fetchedFiles)\n\n\t\t\t\tif (fetchedFiles.length > 0) {\n\t\t\t\t\tawait this.$store.commit('setCollectionFiles', { collectionFileName, fileIds })\n\t\t\t\t}\n\n\t\t\t\treturn fetchedFiles\n\t\t\t} catch (error) {\n\t\t\t\tif (error.response?.status === 404) {\n\t\t\t\t\tthis.errorFetchingCollectionFiles = 404\n\t\t\t\t\treturn []\n\t\t\t\t}\n\n\t\t\t\tthis.errorFetchingCollectionFiles = error\n\n\t\t\t\tshowError(this.t('photos', 'Failed to fetch collections list.'))\n\t\t\t\tlogger.error('[PublicCollectionContent] Error fetching collection files', { error })\n\t\t\t} finally {\n\t\t\t\tthis.loadingCollectionFiles = false\n\t\t\t\tthis.fetchSemaphore.release(fetchSemaphoreSymbol)\n\t\t\t}\n\n\t\t\treturn []\n\t\t},\n\t},\n}\n","/**\n * @copyright Copyright (c) 2019 John Molakvoæ <skjnldsv@protonmail.com>\n *\n * @author John Molakvoæ <skjnldsv@protonmail.com>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport { genFileInfo } from '../utils/fileUtils.js'\nimport { getCurrentUser } from '@nextcloud/auth'\nimport { allMimes } from './AllowedMimes.js'\nimport client from './DavClient.js'\nimport { props } from './DavRequest.js'\nimport moment from '@nextcloud/moment'\n\n/**\n * List files from a folder and filter out unwanted mimes\n *\n * @param {object} path the lookup path\n * @param {object} [options] used for the cancellable requests\n * @param {number} [options.firstResult] Index of the first result that we want (starts at 0)\n * @param {number} [options.nbResults] The number of file to fetch\n * @param {string[]} [options.mimesType] Mime type of the files\n * @param {boolean} [options.full] get full data of the files\n * @param {boolean} [options.onThisDay] get only items from this day of year\n * @param {boolean} [options.onlyFavorites] get only favorite items\n * @return {Promise<object[]>} the file list\n */\nexport default async function(path = '', options = {}) {\n\t// default function options\n\toptions = {\n\t\tfirstResult: 0,\n\t\tnbResults: 200,\n\t\tmimesType: allMimes,\n\t\tonThisDay: false,\n\t\tonlyFavorites: false,\n\t\t...options,\n\t}\n\n\tconst prefixPath = `/files/${getCurrentUser().uid}`\n\n\t// generating the search or condition\n\t// based on the allowed mimetypes\n\tconst orMime = options.mimesType.reduce((str, mime) => `${str}\n\t\t<d:eq>\n\t\t\t<d:prop>\n\t\t\t\t<d:getcontenttype/>\n\t\t\t</d:prop>\n\t\t\t<d:literal>${mime}</d:literal>\n\t\t</d:eq>\n\t`, '')\n\n\tconst eqFavorites = options.onlyFavorites\n\t\t? `<d:eq>\n\t\t\t\t<d:prop>\n\t\t\t\t\t<oc:favorite/>\n\t\t\t\t</d:prop>\n\t\t\t\t<d:literal>1</d:literal>\n\t\t\t</d:eq>`\n\t\t: ''\n\n\tconst onThisDay = options.onThisDay\n\t\t? `<d:or>${Array(20).fill(1)\n\t\t\t.map((_, years) => {\n\t\t\t\tconst start = moment(Date.now()).startOf('day').subtract(3, 'd').subtract(years + 1, 'y')\n\t\t\t\tconst end = moment(Date.now()).endOf('day').add(3, 'd').subtract(years + 1, 'y')\n\t\t\t\treturn `<d:and>\n\t\t\t\t<d:gt>\n\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t<d:getlastmodified />\n\t\t\t\t\t</d:prop>\n\t\t\t\t\t<d:literal>${start.format(moment.defaultFormatUtc)}</d:literal>\n\t\t\t\t</d:gt>\n\t\t\t\t<d:lt>\n\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t<d:getlastmodified />\n\t\t\t\t\t</d:prop>\n\t\t\t\t\t<d:literal>${end.format(moment.defaultFormatUtc)}</d:literal>\n\t\t\t\t</d:lt>\n\t\t\t</d:and>`\n\t\t\t}).join('\\n')}</d:or>`\n\t\t: ''\n\n\toptions = Object.assign({\n\t\tmethod: 'SEARCH',\n\t\theaders: {\n\t\t\t'content-Type': 'text/xml',\n\t\t},\n\t\tdata: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t\t<d:searchrequest xmlns:d=\"DAV:\"\n\t\t\t\txmlns:oc=\"http://owncloud.org/ns\"\n\t\t\t\txmlns:nc=\"http://nextcloud.org/ns\"\n\t\t\t\txmlns:ns=\"https://github.com/icewind1991/SearchDAV/ns\"\n\t\t\t\txmlns:ocs=\"http://open-collaboration-services.org/ns\">\n\t\t\t\t<d:basicsearch>\n\t\t\t\t\t<d:select>\n\t\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t\t${props}\n\t\t\t\t\t\t</d:prop>\n\t\t\t\t\t</d:select>\n\t\t\t\t\t<d:from>\n\t\t\t\t\t\t<d:scope>\n\t\t\t\t\t\t\t<d:href>${prefixPath}/${path}</d:href>\n\t\t\t\t\t\t\t<d:depth>infinity</d:depth>\n\t\t\t\t\t\t</d:scope>\n\t\t\t\t\t</d:from>\n\t\t\t\t\t<d:where>\n\t\t\t\t\t\t<d:and>\n\t\t\t\t\t\t\t<d:or>\n\t\t\t\t\t\t\t\t${orMime}\n\t\t\t\t\t\t\t</d:or>\n\t\t\t\t\t\t\t${eqFavorites}\n\t\t\t\t\t\t\t${onThisDay}\n\t\t\t\t\t\t</d:and>\n\t\t\t\t\t</d:where>\n\t\t\t\t\t<d:orderby>\n\t\t\t\t\t\t<d:order>\n\t\t\t\t\t\t\t<d:prop><nc:metadata-photos-original_date_time/></d:prop>\n\t\t\t\t\t\t\t<d:descending/>\n\t\t\t\t\t\t</d:order>\n\t\t\t\t\t\t<d:order>\n\t\t\t\t\t\t\t<d:prop><d:getlastmodified/></d:prop>\n\t\t\t\t\t\t\t<d:descending/>\n\t\t\t\t\t\t</d:order>\n\t\t\t\t\t</d:orderby>\n\t\t\t\t\t<d:limit>\n\t\t\t\t\t\t<d:nresults>${options.nbResults}</d:nresults>\n\t\t\t\t\t\t<ns:firstresult>${options.firstResult}</ns:firstresult>\n\t\t\t\t\t</d:limit>\n\t\t\t\t</d:basicsearch>\n\t\t\t</d:searchrequest>`,\n\t\tdeep: true,\n\t\tdetails: true,\n\t}, options)\n\n\tconst response = await client.getDirectoryContents('', options)\n\n\treturn response.data.map(data => genFileInfo(data))\n}\n","/**\n * @copyright Copyright (c) 2022 Louis Chemineau <louis@chmn.me>\n *\n * @author Louis Chemineau <louis@chmn.me>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport logger from '../services/logger.js'\nimport getPhotos from '../services/PhotoSearch.js'\nimport SemaphoreWithPriority from '../utils/semaphoreWithPriority.js'\nimport AbortControllerMixin from './AbortControllerMixin.js'\n\nexport default {\n\tname: 'FetchFilesMixin',\n\n\tmixins: [\n\t\tAbortControllerMixin,\n\t],\n\n\tdata() {\n\t\treturn {\n\t\t\terrorFetchingFiles: null,\n\t\t\tloadingFiles: false,\n\t\t\tdoneFetchingFiles: false,\n\t\t\tfetchSemaphore: new SemaphoreWithPriority(1),\n\t\t\tfetchedFileIds: [],\n\t\t}\n\t},\n\n\twatch: {\n\t\t'$route.path'() {\n\t\t\tthis.resetFetchFilesState()\n\t\t},\n\t},\n\n\tmethods: {\n\t\t/**\n\t\t * @param {string} path - Path to pass to getPhotos.\n\t\t * @param {object} options - Options to pass to getPhotos.\n\t\t * @param {string[]} [blacklist] - Array of ids to filter out.\n\t\t * @param {boolean} [force] - Force fetching even if doneFetchingFiles is true\n\t\t * @return {Promise<string[]>} - The next batch of data depending on global offset.\n\t\t */\n\t\tasync fetchFiles(path = '', options = {}, blacklist = [], force = false) {\n\t\t\tif ((this.doneFetchingFiles && !force) || this.loadingFiles) {\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\tconst fetchSemaphoreSymbol = await this.fetchSemaphore.acquire()\n\n\t\t\ttry {\n\t\t\t\tthis.errorFetchingFiles = null\n\t\t\t\tthis.loadingFiles = true\n\n\t\t\t\tconst numberOfImagesPerBatch = 200\n\n\t\t\t\t// Load next batch of images\n\t\t\t\tconst fetchedFiles = await getPhotos(path, {\n\t\t\t\t\tfirstResult: this.fetchedFileIds.length,\n\t\t\t\t\tnbResults: numberOfImagesPerBatch,\n\t\t\t\t\t...options,\n\t\t\t\t\tsignal: this.abortController.signal,\n\t\t\t\t})\n\n\t\t\t\t// If we get less files than requested that means we got to the end\n\t\t\t\tif (fetchedFiles.length !== numberOfImagesPerBatch) {\n\t\t\t\t\tthis.doneFetchingFiles = true\n\t\t\t\t}\n\n\t\t\t\tconst fileIds = fetchedFiles\n\t\t\t\t\t.map(file => file.fileid)\n\t\t\t\t\t.filter(fileId => !this.fetchedFileIds.includes(fileId.toString())) // Filter to prevent duplicate fileIds.\n\n\t\t\t\tthis.fetchedFileIds.push(\n\t\t\t\t\t...fileIds\n\t\t\t\t\t\t.map((fileId) => fileId.toString())\n\t\t\t\t\t\t.filter((fileId) => !blacklist.includes(fileId)),\n\t\t\t\t)\n\n\t\t\t\tthis.$store.dispatch('appendFiles', fetchedFiles)\n\n\t\t\t\tlogger.debug(`[FetchFilesMixin] Fetched ${fileIds.length} new files: `, fileIds)\n\n\t\t\t\treturn fileIds\n\t\t\t} catch (error) {\n\t\t\t\tif (error.response?.status === 404) {\n\t\t\t\t\tthis.errorFetchingFiles = 404\n\t\t\t\t} else if (error.code === 'ERR_CANCELED') {\n\t\t\t\t\treturn []\n\t\t\t\t} else {\n\t\t\t\t\tthis.errorFetchingFiles = error\n\t\t\t\t}\n\n\t\t\t\t// cancelled request, moving on...\n\t\t\t\tlogger.error('Error fetching files', { error })\n\t\t\t\tconsole.error(error)\n\t\t\t} finally {\n\t\t\t\tthis.loadingFiles = false\n\t\t\t\tthis.fetchSemaphore.release(fetchSemaphoreSymbol)\n\t\t\t}\n\n\t\t\treturn []\n\t\t},\n\n\t\tresetFetchFilesState() {\n\t\t\tthis.doneFetchingFiles = false\n\t\t\tthis.errorFetchingFiles = null\n\t\t\tthis.loadingFiles = false\n\t\t\tthis.fetchedFileIds = []\n\t\t},\n\t},\n}\n","/**\n * @copyright Copyright (c) 2022 Louis Chemineau <louis@chmn.me>\n *\n * @author Louis Chemineau <louis@chmn.me>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nexport default {\n\tname: 'FilesByMonthMixin',\n\n\tcomputed: {\n\t\t/**\n\t\t * @return {Object<string, []>}\n\t\t */\n\t\tfileIdsByMonth() {\n\t\t\tconst filesByMonth = {}\n\t\t\tfor (const fileId of this.fetchedFileIds) {\n\t\t\t\tconst file = this.files[fileId]\n\t\t\t\tif (file) {\n\t\t\t\t\tfilesByMonth[file.month] = filesByMonth[file.month] ?? []\n\t\t\t\t\tfilesByMonth[file.month].push(file.fileid)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Sort files in sections.\n\t\t\tObject.keys(filesByMonth)\n\t\t\t\t.forEach(month => filesByMonth[month].sort(this.sortFilesByTimestamp))\n\n\t\t\treturn filesByMonth\n\t\t},\n\n\t\tcollectionFileIdsByMonth() {\n\t\t\tconst filesByMonth = {}\n\n\t\t\tfor (const fileId of this.collectionFileIds) {\n\t\t\t\tconst file = this.files[fileId]\n\t\t\t\tif (file) {\n\t\t\t\t\tfilesByMonth[file.month] = filesByMonth[file.month] ?? []\n\t\t\t\t\tfilesByMonth[file.month].push(file.fileid)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Sort files in sections.\n\t\t\tObject.keys(filesByMonth)\n\t\t\t\t.forEach(month => filesByMonth[month].sort(this.sortFilesByTimestamp))\n\n\t\t\treturn filesByMonth\n\t\t},\n\n\t\t/**\n\t\t * @return {string[]}\n\t\t */\n\t\tmonthsList() {\n\t\t\treturn Object\n\t\t\t\t.keys(this.fileIdsByMonth)\n\t\t\t\t.sort((month1, month2) => month1 > month2 ? -1 : 1)\n\t\t},\n\n\t\t/**\n\t\t * @return {string[]}\n\t\t */\n\t\tcollectionMonthsList() {\n\t\t\treturn Object\n\t\t\t\t.keys(this.collectionFileIdsByMonth)\n\t\t\t\t.sort((month1, month2) => month1 > month2 ? -1 : 1)\n\t\t},\n\t},\n\n\tmethods: {\n\t\t/**\n\t\t * @param {string} fileId1 The first file ID\n\t\t * @param {string} fileId2 The second file ID\n\t\t * @return {-1 | 1}\n\t\t */\n\t\tsortFilesByTimestamp(fileId1, fileId2) {\n\t\t\treturn this.files[fileId1].timestamp > this.files[fileId2].timestamp ? -1 : 1\n\t\t},\n\t},\n}\n"],"names":["name","data","fetchSemaphore","SemaphoreWithPriority","loadingCollection","loadingCollectionFiles","errorFetchingCollection","errorFetchingCollectionFiles","mixins","AbortControllerMixin","methods","_objectSpread","mapActions","fetchCollection","collectionFileName","extraProps","client","this","collection","signal","abortController","addCollections","collections","error","_error$response","response","status","logger","showError","t","fetchCollectionFiles","mappers","arguments","length","undefined","fetchSemaphoreSymbol","acquire","fetchedFiles","fileIds","map","file","fileid","toString","forEach","mapper","appendFiles","$store","commit","_error$response2","release","async","path","options","firstResult","nbResults","mimesType","allMimes","onThisDay","onlyFavorites","prefixPath","concat","getCurrentUser","uid","orMime","reduce","str","mime","eqFavorites","Array","fill","_","years","start","moment","Date","now","startOf","subtract","end","endOf","add","format","defaultFormatUtc","join","Object","assign","method","headers","props","deep","details","getDirectoryContents","genFileInfo","errorFetchingFiles","loadingFiles","doneFetchingFiles","fetchedFileIds","watch","resetFetchFilesState","fetchFiles","blacklist","force","numberOfImagesPerBatch","getPhotos","filter","fileId","includes","push","dispatch","debug","code","console","computed","fileIdsByMonth","filesByMonth","files","_filesByMonth$file$mo","month","keys","sort","sortFilesByTimestamp","collectionFileIdsByMonth","collectionFileIds","_filesByMonth$file$mo2","monthsList","month1","month2","collectionMonthsList","fileId1","fileId2","timestamp"],"sourceRoot":""}