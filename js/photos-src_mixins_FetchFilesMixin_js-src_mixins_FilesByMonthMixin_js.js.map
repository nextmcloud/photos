{"version":3,"file":"photos-src_mixins_FetchFilesMixin_js-src_mixins_FilesByMonthMixin_js.js?v=83e70d7a403b141026a7","mappingssources":["webpack:///photos/src/mixins/FetchFilesMixin.js","webpack:///photos/src/mixins/FilesByMonthMixin.js","webpack:///photos/src/services/PhotoSearch.js"],"sourcesContent":["/**\n * @copyright Copyright (c) 2022 Louis Chemineau <louis@chmn.me>\n *\n * @author Louis Chemineau <louis@chmn.me>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport { davGetClient, davRootPath } from '@nextcloud/files';\nimport { joinPaths } from '@nextcloud/paths';\nimport logger from '../services/logger.js';\nimport getPhotos from '../services/PhotoSearch.js';\nimport SemaphoreWithPriority from '../utils/semaphoreWithPriority.js';\nimport AbortControllerMixin from './AbortControllerMixin.js';\nimport store from '../store/index.js';\nexport default {\n  name: 'FetchFilesMixin',\n  mixins: [AbortControllerMixin],\n  data() {\n    return {\n      errorFetchingFiles: null,\n      loadingFiles: false,\n      doneFetchingFiles: false,\n      fetchSemaphore: new SemaphoreWithPriority(1),\n      fetchedFileIds: []\n    };\n  },\n  watch: {\n    '$route.path'() {\n      this.resetFetchFilesState();\n    }\n  },\n  methods: {\n    /**\n     * @param {object} options - Options to pass to getPhotos.\n     * @param {string[]} [blacklist=[]] - Array of ids to filter out.\n     * @param {boolean} [force=false] - Force fetching even if doneFetchingFiles is true\n     * @return {Promise<string[]>} - The next batch of data depending on global offset.\n     */\n    async fetchFiles() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let blacklist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (this.doneFetchingFiles && !force || this.loadingFiles) {\n        return [];\n      }\n      const fetchSemaphoreSymbol = await this.fetchSemaphore.acquire();\n      try {\n        this.errorFetchingFiles = null;\n        this.loadingFiles = true;\n        const numberOfImagesPerBatch = 200;\n\n        // Load next batch of images\n        const fetchedFiles = await getPhotos({\n          firstResult: this.fetchedFileIds.length,\n          nbResults: numberOfImagesPerBatch,\n          ...options,\n          signal: this.abortController.signal\n        });\n\n        // If we get less files than requested that means we got to the end\n        if (fetchedFiles.length !== numberOfImagesPerBatch) {\n          this.doneFetchingFiles = true;\n        }\n        const fileIds = fetchedFiles.map(file => file.fileid).filter(fileId => !this.fetchedFileIds.includes(fileId.toString())); // Filter to prevent duplicate fileIds.\n\n        this.fetchedFileIds.push(...fileIds.map(fileId => fileId.toString()).filter(fileId => !blacklist.includes(fileId)));\n        this.$store.dispatch('appendFiles', fetchedFiles);\n        logger.debug(`[FetchFilesMixin] Fetched ${fileIds.length} new files: `, fileIds);\n        return fileIds;\n      } catch (error) {\n        if (error.response?.status === 404) {\n          const sources = store.state.userConfig.photosSourceFolders;\n          for (const source of sources) {\n            if (error.response?.data?.match(`File with name /${source} could not be located`) === null) {\n              continue;\n            }\n            logger.debug(`The ${source} folder does not exist, creating it.`);\n            try {\n              await davGetClient().createDirectory(joinPaths(davRootPath, source));\n              this.resetFetchFilesState();\n              return [];\n            } catch (error) {\n              this.errorFetchingFiles = 404;\n              logger.error('Fail to create source directory', {\n                error\n              });\n            }\n          }\n        } else if (error.code === 'ERR_CANCELED') {\n          return [];\n        } else {\n          this.errorFetchingFiles = error;\n        }\n\n        // cancelled request, moving on...\n        logger.error('Error fetching files', {\n          error\n        });\n      } finally {\n        this.loadingFiles = false;\n        this.fetchSemaphore.release(fetchSemaphoreSymbol);\n      }\n      return [];\n    },\n    resetFetchFilesState() {\n      this.doneFetchingFiles = false;\n      this.errorFetchingFiles = null;\n      this.loadingFiles = false;\n      this.fetchedFileIds = [];\n    }\n  }\n};","/**\n * @copyright Copyright (c) 2022 Louis Chemineau <louis@chmn.me>\n *\n * @author Louis Chemineau <louis@chmn.me>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nexport default {\n  name: 'FilesByMonthMixin',\n  computed: {\n    /**\n     * @return {Object<string, []>}\n     */\n    fileIdsByMonth() {\n      const filesByMonth = {};\n      for (const fileId of this.fetchedFileIds) {\n        const file = this.files[fileId];\n        if (file) {\n          filesByMonth[file.month] = filesByMonth[file.month] ?? [];\n          filesByMonth[file.month].push(file.fileid);\n        }\n      }\n\n      // Sort files in sections.\n      Object.keys(filesByMonth).forEach(month => filesByMonth[month].sort(this.sortFilesByTimestamp));\n      return filesByMonth;\n    },\n    /**\n     * @return {string[]}\n     */\n    monthsList() {\n      return Object.keys(this.fileIdsByMonth).sort((month1, month2) => month1 > month2 ? -1 : 1);\n    }\n  },\n  methods: {\n    /**\n     * @param {string} fileId1 The first file ID\n     * @param {string} fileId2 The second file ID\n     * @return {-1 | 1}\n     */\n    sortFilesByTimestamp(fileId1, fileId2) {\n      return this.files[fileId1].timestamp > this.files[fileId2].timestamp ? -1 : 1;\n    }\n  }\n};","/**\n * @copyright Copyright (c) 2019 John Molakvoæ <skjnldsv@protonmail.com>\n *\n * @author John Molakvoæ <skjnldsv@protonmail.com>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport { genFileInfo } from '../utils/fileUtils.js';\nimport { allMimes } from './AllowedMimes.js';\nimport client from './DavClient.js';\nimport { props } from './DavRequest.js';\nimport moment from '@nextcloud/moment';\nimport store from '../store/index.js';\nimport { davRootPath } from '@nextcloud/files';\nimport { joinPaths } from '@nextcloud/paths';\n\n/**\n * List files from a folder and filter out unwanted mimes\n *\n * @param {object} [options] used for the cancellable requests\n * @param {number} [options.firstResult=0] Index of the first result that we want (starts at 0)\n * @param {number} [options.nbResults=200] The number of file to fetch\n * @param {string[]} [options.mimesType=allMimes] Mime type of the files\n * @param {boolean} [options.full=false] get full data of the files\n * @param {boolean} [options.onThisDay=false] get only items from this day of year\n * @param {boolean} [options.onlyFavorites=false] get only favorite items\n * @return {Promise<object[]>} the file list\n */\nexport default async function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // default function options\n  options = {\n    firstResult: 0,\n    nbResults: 200,\n    mimesType: allMimes,\n    onThisDay: false,\n    onlyFavorites: false,\n    ...options\n  };\n\n  // generating the search or condition\n  // based on the allowed mimetypes\n  const orMime = options.mimesType.reduce((str, mime) => `${str}\n\t\t<d:eq>\n\t\t\t<d:prop>\n\t\t\t\t<d:getcontenttype/>\n\t\t\t</d:prop>\n\t\t\t<d:literal>${mime}</d:literal>\n\t\t</d:eq>\n\t`, '');\n  const eqFavorites = options.onlyFavorites ? `<d:eq>\n\t\t\t\t<d:prop>\n\t\t\t\t\t<oc:favorite/>\n\t\t\t\t</d:prop>\n\t\t\t\t<d:literal>1</d:literal>\n\t\t\t</d:eq>` : '';\n  const onThisDay = options.onThisDay ? `<d:or>${Array(20).fill(1).map((_, years) => {\n    const start = moment(Date.now()).startOf('day').subtract(3, 'd').subtract(years + 1, 'y');\n    const end = moment(Date.now()).endOf('day').add(3, 'd').subtract(years + 1, 'y');\n    return `<d:and>\n\t\t\t\t<d:gt>\n\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t<d:getlastmodified />\n\t\t\t\t\t</d:prop>\n\t\t\t\t\t<d:literal>${start.format(moment.defaultFormatUtc)}</d:literal>\n\t\t\t\t</d:gt>\n\t\t\t\t<d:lt>\n\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t<d:getlastmodified />\n\t\t\t\t\t</d:prop>\n\t\t\t\t\t<d:literal>${end.format(moment.defaultFormatUtc)}</d:literal>\n\t\t\t\t</d:lt>\n\t\t\t</d:and>`;\n  }).join('\\n')}</d:or>` : '';\n  const sourceFolders = store.state.userConfig.photosSourceFolders.map(() => `\n\t\t\t<d:scope>\n\t\t\t\t<d:href>${joinPaths(davRootPath)}</d:href>\n\t\t\t\t<d:depth>infinity</d:depth>\n\t\t\t</d:scope>`).join('\\n');\n  options = Object.assign({\n    method: 'SEARCH',\n    headers: {\n      'content-Type': 'text/xml'\n    },\n    data: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t\t<d:searchrequest xmlns:d=\"DAV:\"\n\t\t\t\txmlns:oc=\"http://owncloud.org/ns\"\n\t\t\t\txmlns:nc=\"http://nextcloud.org/ns\"\n\t\t\t\txmlns:ns=\"https://github.com/icewind1991/SearchDAV/ns\"\n\t\t\t\txmlns:ocs=\"http://open-collaboration-services.org/ns\">\n\t\t\t\t<d:basicsearch>\n\t\t\t\t\t<d:select>\n\t\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t\t${props}\n\t\t\t\t\t\t</d:prop>\n\t\t\t\t\t</d:select>\n\t\t\t\t\t<d:from>\n\t\t\t\t\t\t${sourceFolders}\n\t\t\t\t\t</d:from>\n\t\t\t\t\t<d:where>\n\t\t\t\t\t\t<d:and>\n\t\t\t\t\t\t\t<d:or>\n\t\t\t\t\t\t\t\t${orMime}\n\t\t\t\t\t\t\t</d:or>\n\t\t\t\t\t\t\t${eqFavorites}\n\t\t\t\t\t\t\t${onThisDay}\n\t\t\t\t\t\t</d:and>\n\t\t\t\t\t</d:where>\n\t\t\t\t\t<d:orderby>\n\t\t\t\t\t\t<d:order>\n\t\t\t\t\t\t\t<d:prop><nc:metadata-photos-original_date_time/></d:prop>\n\t\t\t\t\t\t\t<d:descending/>\n\t\t\t\t\t\t</d:order>\n\t\t\t\t\t\t<d:order>\n\t\t\t\t\t\t\t<d:prop><d:getlastmodified/></d:prop>\n\t\t\t\t\t\t\t<d:descending/>\n\t\t\t\t\t\t</d:order>\n\t\t\t\t\t</d:orderby>\n\t\t\t\t\t<d:limit>\n\t\t\t\t\t\t<d:nresults>${options.nbResults}</d:nresults>\n\t\t\t\t\t\t<ns:firstresult>${options.firstResult}</ns:firstresult>\n\t\t\t\t\t</d:limit>\n\t\t\t\t</d:basicsearch>\n\t\t\t</d:searchrequest>`,\n    deep: true,\n    details: true\n  }, options);\n  const response = await client.getDirectoryContents('', options);\n  return response.data.map(data => genFileInfo(data));\n}"],"names":[],"sourceRoot":""}